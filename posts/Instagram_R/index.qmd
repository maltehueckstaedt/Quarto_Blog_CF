---
title: "Analyse Instagram Data with R"
author: "Malte Hückstädt"
date: "2023-05-05"
categories: [R, web-scraping]
---

```{r}
#install.packages("rjson")
library(rjson)
library(tidyverse)
sb_list <- fromJSON(file="./data/sucuk_bratwurst.json")


```

# Netzwerkanalyse

```{r}
# Erstellen Sie eine leere Liste, um die Usernamen aller getaggten Personen für jeden Post zu speichern
TaggedUsers <- list()

# Iterieren Sie durch jede Liste in Ihrer Hauptliste
for (post in sb_list) {
  
  # Extrahieren Sie alle Usernamen der getaggten Benutzer aus der aktuellen Post-Liste
  taggedUsersUsernames <- list()
  for (taggedUser in post$taggedUsers) {
    taggedUsersUsernames <- c(taggedUsersUsernames, taggedUser$username)
  }
  
  # Fügen Sie die Usernamen aller getaggten Benutzer der Liste "TaggedUsers" hinzu
  TaggedUsers[[length(TaggedUsers) + 1]] <- taggedUsersUsernames
}
TaggedUsers[[1]]

# Entfernen von Listen mit weniger als 2 Elementen
TaggedUsers <- TaggedUsers %>% 
  discard(~ length(.x) < 2)


```

```{r}
library(igraph)

# Initialisierung eines leeren Datenrahmens
df <- data.frame(from = character(),
                 to = character(),
                 stringsAsFactors = FALSE)

# Schleife durch jeden Post
for(i in 1:length(TaggedUsers)) {
  # Erstellen Sie eine Kantenliste für diesen Post
  edges <- t(combn(TaggedUsers[[i]], 2))
  
  # Konvertieren Sie die Kantenliste in ein Datenrahmenobjekt
  edges_df <- as.data.frame(edges, stringsAsFactors = FALSE)
  names(edges_df) <- c("from", "to")
  edges_df$post <- as.character(i)

  # Fügen Sie die Kantenliste dem Gesamtdatenrahmen hinzu
  df <- rbind(df, edges_df)
}

# Aggregieren Sie die Kantenliste nach "from", "to" und "post" und zählen Sie die Häufigkeit
df_count <- df %>%
  group_by(from, to) %>%
  summarise(weight = n()) %>%
  ungroup()


# Libraries
library(igraph)
library(networkD3)

# filter
data <- df_count %>% filter(weight>3)

#to igraph
igraph_obj <-  graph_from_data_frame(data)

#to network3d
net_3d <- igraph_to_networkD3(igraph_obj, group = members)

net_3d$links$value <- data$weight/2

#generiere Gruppenvar
net_3d$nodes
net_3d$nodes$group2 <- net_3d$nodes$group


size <- sample(1000:50000, 107, replace = TRUE)/600
net_3d$nodes$size <- size

forceNetwork(Links = net_3d$links, Nodes = net_3d$nodes,
             Source = 'source', Target = 'target', 
             NodeID = 'name', Value = "value",
             Group = 'group2', opacity = 0.8,
             Nodesize= "size",
             legend = T,
             linkDistance = 80,
             linkColour = "#666",
             zoom = T,
             opacityNoHover = .7,
             colourScale = JS("d3.scaleOrdinal(d3.schemeCategory10);"))

```
