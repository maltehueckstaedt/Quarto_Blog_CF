{
  "hash": "726d23219da8e7b3b187c202e8551d93",
  "result": {
    "markdown": "---\ntitle: \"Webscraping with Python\"\nauthor: \"Malte Hückstädt\"\ndate: \"2023-01-09\"\ncategories: [Python, NLP]\nbibliography: Bibliothek.bib\n---\n\n\n# Introduction\n\nA *Bag of Words* is a form of vectorized text representation that describes the multiplicity of words in a text corpus. Thereby, a *Bag of Words* only considers the number, but not the grammar or the order in which words are implemented in a text corpus. This is also the name-giving core property of the *Bag of Words*: \\`The model is only interested in whether and in which frequency specific words occur in a text corpus, but not where they are implemented in which grammatical way in a text corpus. Accordingly, the *Bag of Words* approach is often used to classify documents where the (frequency of) occurrence of specific words can be used as a classification criterion e.g. of documents [@albrechtBlueprintsTextAnalysis2020].\n\n# Loading libraries and data\n\nAs a simple introduction to natural language processing (NLP) we want to use [Python](https://www.python.org/) to analyze various online accessible articles from the art magazine [*Monopol*](https://www.monopol-magazin.de/) from the section *Art Market* ([see](/_posts/2022-03-29-webscraping_python.md)). For this we need the Pythons libraries `pandas`, `nltk`, `string`, `re` and for the later backup of our collected data the library `openpyxl`. Since I myself use [RStudio](https://www.rstudio.com/) as an IDE (Integrated Development Environment) for Python, I load the R package `reticulate` into an R environment and turn off the package (for me annoying) notification function. Finally, I use the `use_python()` function to tell R under which path my Python binary can be found. Users working directly in Python can omit this step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\noptions(reticulate.repl.quiet = TRUE)\nuse_python(\"~/Library/r-miniconda-arm64/bin/python\")\n```\n:::\n\n\nIn a further step, the above-mentioned Python libraries are loaded into the working environment. If the libraries have not yet been installed, this can be done from R with the function `py_install()`. In Python the libraries can be installed directly with the function `pip install` function.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nimport openpyxl\nimport nltk\nimport string\nimport re\n```\n:::\n\n\nNext, we load the data obtained in *Lesson 1* on web scraping ([see](/_posts/2022-03-29-webscraping_python.md)) into our workspace with the help of the function `read_excel()`.[^1] To avoid the creation of a new column with the row indices the argument `index_col` is set to `0`. As `engine` to be used `openpyxl` is further specified.\n\n[^1]: The collected data can also be loaded [here](https://github.com/MalteHueckstaedt/chernoff_faces/raw/master/analysis/03-2022-webscraping_python/output.xlsx) as `.xlsx`-file.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndf = pd.read_excel(r'output.xlsx', index_col=0, engine='openpyxl')\n```\n:::\n\n\n# Data preparation\n\nTo create a *bag of words*, a list named `texts` with ten elements is generated from the column vector `texts` of the data frame `df`. Each element contains an article i.e. a body of text. A shorter example represents the article with the name \"*Venice painting of Monet should bring in millions*\", which is deposited in the second element (`texts[1]`) of the list.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntexts = df['texts'].tolist()\n#texts[1]\n```\n:::\n\n\nWe specify a for-loop that transforms all words of the ten text corpora into lowercase. To check the effectiveness of the for-loop, we again output the 2nd element of the list `texts`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfor i in range(len(texts)):\n    texts[i] = texts[i].lower()\n#texts[1]\n```\n:::\n\n\nIn a further step, *stopwords* (such as \"*and*\", \"*or*\", \"*the*\" or \"*that*\") are removed from the text corpora using a function it can find on [Stack Overflow](https://stackoverflow.com/questions/52361543/how-do-i-remove-stop-words-from-an-arraylist-of-strings-in-python). *stopwords* are those words that are ignored in full-text indexing such as that of the *word of bags*. This is to be done because *stopwords* occur very frequently on the one hand and on the other hand usually have no relevance for capturing the document content.\n\nSince the text corpora originate from a German-language art magazine, we write into the object `stop_words` all those German stopwords, which the library `nltk` supplies.[^2] In the case that further stopwords are to be defined, this can be done further with the function `append()`.\n\n[^2]: Diese müssen ggf. separat mit der Funktion `nltk.download('stopwords')` geladen werden.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom nltk.corpus import stopwords\nstop_words = stopwords.words('german')\n\nnew_stop_words = ['de','wurde','etwa','mai','gab']\nstop_words.extend(new_stop_words)\n\ndef remove_stopwords(texts):\n    output_array=[]\n    for sentence in texts:\n        temp_list=[]\n        for word in sentence.split():\n            if word.lower() not in stop_words:\n                temp_list.append(word)\n        output_array.append(' '.join(temp_list))\n    return output_array\n\ntexts=remove_stopwords(texts)\n```\n:::\n\n\nIn order to ignore the punctuation and numbers of the text corpora in the context of our analysis, two further for-loops are specified: The former removes all punctuation marks using the `sub()` function of the `re` library, the latter splits the text corpora into their individual tokens and filters those that are alphabetic but not numeric.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n#remove punctuation\ntexts = [re.sub('[{}]'.format(string.punctuation), '', i) for i in texts]\n\n#remove numbers\ntexts = [[word for word in texts.split() if word.isalpha()] for texts in texts]\n```\n:::\n\n\n# Counter with Bag of Words\n\nNow the actual *bag of words* can be created. We import the function `Counter()` of the `collection`-library and add the tokens of the ten articles in a single list called `texts` with the `sum()`-function. We then pass this list to the `counter()` function of the `collections` library and store the results in the object `bow` (bag of words). In it we find the counts of the tokens of our ten text corpora.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom collections import Counter\n\ntexts= sum(texts, [])\nbow = Counter(texts)\n```\n:::\n\n\nAs we are mainly interested in the most frequently occurring words in the ten articles, we specify a bar plot with the help of the `matplotlib`-library. To do this, we extract the number and names of the ten most frequent terms.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ny = [count for tag, count in bow.most_common(10)]\nx = [tag for tag, count in bow.most_common(10)]\n\nimport matplotlib.pyplot as plt\nplt.clf()\nplt.bar(x, y, color='crimson')\nplt.title(\"Term frequencies in ten monopol-magazin articles\")\nplt.ylabel(\"Frequency\")\nplt.xticks(rotation=90)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [Text(0, 0, 'euro'), Text(1, 0, 'besitzer'), Text(2, 0, 'art'), Text(3, 0, 'galerie'), Text(4, 0, 'new'), Text(5, 0, 'york'), Text(6, 0, 'paris'), Text(7, 0, 'werke'), Text(8, 0, 'auktionshaus'), Text(9, 0, 'spark')])\n```\n:::\n\n```{.python .cell-code}\nplt.tight_layout() # change the whitespace such that all labels fit nicely\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=614}\n:::\n:::\n\n\nAs we can see, the most frequently represented words of the ten articles of the art magazine monopol-magazin are connoted both economically (\"*euro*\", \"*owner*\", \"*auction house*\") and culturally (\"*art*\",\"*galerie*\",\"*werke*\",\"*auction house*\"). In this way, for example, a classifier without knowledge of the rubric of the text corpora could assign them to the section *art market*.\n\n# Limitations of Bag-of-Words\n\nAs we have seen, the bag of words approach is efficient and easy to implement, but it also has disadvantages: If the Bag of Words approach is used for the classification of large document sets, the increasing number of tokens and documents results, among other things, in very large data matrices that have a lot of zero values because specific words are rarely mentioned. This circumstance complicates the interpretation of the results of a Bag of Words considerably.\n\nFurthermore, the Bag of Words approach cannot interpret textual data in terms of meaning. For example, consider the two sentences \"*I love watching series on Netflix and hate visiting art museums*\" and conversely \"*I love visiting art museums and hate watching series on Netflix*\". The bag of words approach leads to similar vectorized representations even though the two sentences have contrasting inhaptic meanings.\n\nDeep learning models such as BERT address these key weaknesses of the bag of words approach.\n\n# References\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}